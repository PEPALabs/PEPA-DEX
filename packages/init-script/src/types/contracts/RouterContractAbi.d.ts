/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.35.0
  Forc version: 0.35.3
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type RouterErrorInput = Enum<{ NotInitialized: [], MultihopPairNotFound: [], MaxInputExceeded: [], PoolFailure: [], AlreadyInitialized: [], LpTokenNotEnough: [], InputNotEnough: [] }>;
export type RouterErrorOutput = RouterErrorInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type SwapResultInput = { amount_0_out: BigNumberish, amount_1_out: BigNumberish };
export type SwapResultOutput = { amount_0_out: BN, amount_1_out: BN };

interface RouterContractAbiInterface extends Interface {
  functions: {
    add_liquidity: FunctionFragment;
    initialize: FunctionFragment;
    remove_liquidity: FunctionFragment;
    swap_exact_input_for_output: FunctionFragment;
    swap_exact_input_for_output_multihop: FunctionFragment;
    swap_input_for_exact_output: FunctionFragment;
    swap_input_for_exact_output_multihop: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'add_liquidity', values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'remove_liquidity', values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'swap_exact_input_for_output', values: [string, ContractIdInput, ContractIdInput, BigNumberish, BigNumberish, BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'swap_exact_input_for_output_multihop', values: [string, Vec<string>, BigNumberish, BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'swap_input_for_exact_output', values: [string, ContractIdInput, ContractIdInput, BigNumberish, BigNumberish, BigNumberish, BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'swap_input_for_exact_output_multihop', values: [string, Vec<string>, BigNumberish, BigNumberish, IdentityInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'add_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'initialize', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'remove_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'swap_exact_input_for_output', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'swap_exact_input_for_output_multihop', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'swap_input_for_exact_output', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'swap_input_for_exact_output_multihop', data: BytesLike): DecodedValue;
}

export class RouterContractAbi extends Contract {
  interface: RouterContractAbiInterface;
  functions: {
    add_liquidity: InvokeFunction<[swap_address: string, amount_0: BigNumberish, amount_1: BigNumberish, amount_0_min: BigNumberish, amount_1_min: BigNumberish], [BN, BN]>;
    initialize: InvokeFunction<[factory: string], void>;
    remove_liquidity: InvokeFunction<[swap_address: string, amount_lp: BigNumberish, amount_0: BigNumberish, amount_1: BigNumberish, amount_0_min: BigNumberish, amount_1_min: BigNumberish], [BN, BN]>;
    swap_exact_input_for_output: InvokeFunction<[swap_address: string, asset_0: ContractIdInput, asset_1: ContractIdInput, asset_0_amount: BigNumberish, asset_1_amount: BigNumberish, amount_out_min: BigNumberish, to: IdentityInput], SwapResultOutput>;
    swap_exact_input_for_output_multihop: InvokeFunction<[swap_factory: string, path: Vec<string>, amount_in: BigNumberish, amount_out_min: BigNumberish, to: IdentityInput], SwapResultOutput>;
    swap_input_for_exact_output: InvokeFunction<[swap_address: string, asset_0: ContractIdInput, asset_1: ContractIdInput, asset_0_amount: BigNumberish, asset_1_amount: BigNumberish, amount_in_max: BigNumberish, amount_out: BigNumberish, to: IdentityInput], SwapResultOutput>;
    swap_input_for_exact_output_multihop: InvokeFunction<[swap_factory: string, path: Vec<string>, amount_out: BigNumberish, amount_in_max: BigNumberish, to: IdentityInput], SwapResultOutput>;
  };
}
